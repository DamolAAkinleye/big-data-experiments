import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.spark.sql._
import spark.sql
import spark.implicits._

import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.streaming.kafka010._
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe

val kafkaParams = Map[String, Object](
    "bootstrap.servers" -> "localhost:9092",
    "key.deserializer" -> classOf[StringDeserializer],
    "value.deserializer" -> classOf[StringDeserializer],
    "group.id" -> "nyse-stock-ticker",
    "auto.offset.reset" -> "latest",
    "enable.auto.commit" -> (false: java.lang.Boolean)
  )

val ssc = new StreamingContext(sc, Seconds(5))

case class trade(xchange: String, symbol: String, trdate: String, open: Float,high: Float,low: Float,close: Float,volume: Integer,adj_close: Float);

val inputStream = KafkaUtils.createDirectStream(ssc, PreferConsistent, Subscribe[String, String](Array("stock_ticker_pr"), kafkaParams));

val processedStream= inputStream.map(record=>record.value.split(",")).map(line=>trade(line(0).toString, line(1).toString, line(2).toString, line(3).toFloat,line(4).toFloat,line(5).toFloat,line(6).toFloat,line(7).toInt,line(0).toFloat))

processedStream.foreachRDD{rddrec=>rddrec.toDF}
processedStream.foreachRDD{rddrec=>rddrec.toDF.createOrReplaceTempView("streamingTicker")}

ssc.start
ssc.awaitTermination
